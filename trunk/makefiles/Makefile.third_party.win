# SVN tags of dependencies to checkout.
GFLAGS_TAG = 76 # version 2.0
PROTOBUF_TAG = 512 # version 2.5.0 + fix
GOOGLE_APPUTILS_TAG = 14 # 0.4.0
SPARSEHASH_TAG = 116 # 2.0.2
CBC_TAG = 2.8.7
ZLIB_TAG = 1.2.8
ZLIB_ARCHIVE_TAG = 128
SWIG_TAG = 2.0.11

# Build extra dependencies (GLPK, SCIP) from archive only if the archive is present.
# The archive should be glpk-4.53.tar.gz
GLPK_TAG = 4.53
# The archive should be scipoptsuite-3.0.2.tgz
SCIP_TAG = 3.0.2
SOPLEX_TAG = 1.7.2

# Detect if scip archive is there.
ifeq ($(wildcard dependencies/archives/scipoptsuite-$(SCIP_TAG).tgz),)
    SCIP_TARGET =
    SCIP_MAKEFILE = \# WINDOWS_SCIP_DIR support not included.
else
    SCIP_TARGET = dependencies/install/lib/scip.lib
    SCIP_MAKEFILE = WINDOWS_SCIP_DIR = $(OR_ROOT_FULL)\\dependencies\\install\\scipoptsuite-$(SCIP_TAG)\\scip-$(SCIP_TAG)
endif

# Detect if GLPK archive is there.
ifeq ($(wildcard dependencies/archives/glpk-$(GLPK_TAG).tar.gz),)
    GLPK_TARGET =
    GLPK_MAKEFILE = \# GLPK support not included.
else
    GLPK_TARGET = dependencies\install\bin\glpsol.exe
    GLPK_MAKEFILE = WINDOWS_GLPK_DIR = $(OR_ROOT_FULL)\\dependencies\\install
endif
# Main target.
.PHONY: third_party build_third_party makefile_third_party
third_party: build_third_party makefile_third_party

build_third_party: \
	install_directories \
	install_zlib \
	install_gflags \
	install_google_apputils \
	install_protobuf \
	install_sparsehash \
	install_swig \
	install_coin_cbc \
	install_glpk \
	install_scip

download_third_party: \
    dependencies/archives/zlib$(ZLIB_ARCHIVE_TAG).zip \
	dependencies/sources/gflags/autogen.sh \
	dependencies/sources/protobuf/autogen.sh \
	dependencies/sources/sparsehash/autogen.sh \
	dependencies/archives/swigwin-$(SWIG_TAG).zip \
	dependencies/sources/google-apputils/README \
	dependencies/sources/coin-cbc/configure

# Directories:
.PHONY: install_directories
install_directories: dependencies\install\bin dependencies\install\lib\coin dependencies\install\include\coin

dependencies\install\bin: dependencies\install
ifeq ($(wildcard dependencies\install),)
	tools\mkdir.exe dependencies\install\bin
endif

dependencies\install\lib: dependencies\install
ifeq ($(wildcard dependencies\install\lib),)
	tools\mkdir.exe dependencies\install\lib
endif

dependencies\install\lib\coin: dependencies\install\lib
ifeq ($(wildcard dependencies\install\lib\coin),)
	tools\mkdir.exe dependencies\install\lib\coin
endif

dependencies\install\include: dependencies\install
ifeq ($(wildcard dependencies\install\include),)
	tools\mkdir.exe dependencies\install\include
endif

dependencies\install\include\coin: dependencies\install\include
ifeq ($(wildcard dependencies\install\include\coin),)
	tools\mkdir.exe dependencies\install\include\coin
endif

dependencies\install:
	tools\mkdir.exe dependencies\install

# Install zlib
install_zlib: dependencies\install\include\zlib.h dependencies\install\include\zconf.h dependencies\install\lib\zlib.lib

dependencies\install\include\zlib.h: dependencies\sources\zlib-$(ZLIB_TAG)\zlib.h
	copy dependencies\sources\zlib-$(ZLIB_TAG)\zlib.h dependencies\install\include

dependencies\install\include\zconf.h: dependencies\sources\zlib-$(ZLIB_TAG)\zlib.h
	copy dependencies\sources\zlib-$(ZLIB_TAG)\zconf.h dependencies\install\include
	tools\touch.exe dependencies\install\include\zconf.h

dependencies\install\lib\zlib.lib: dependencies\sources\zlib-$(ZLIB_TAG)\zlib.h
	cd dependencies\sources\zlib-$(ZLIB_TAG) && nmake -f win32\Makefile.msc zlib.lib
	copy dependencies\sources\zlib-$(ZLIB_TAG)\zlib.lib dependencies\install\lib

dependencies\sources\zlib-$(ZLIB_TAG)\zlib.h: dependencies\archives\zlib$(ZLIB_ARCHIVE_TAG).zip
	tools\unzip -d dependencies\sources dependencies\archives\zlib$(ZLIB_ARCHIVE_TAG).zip
	tools\touch.exe dependencies\sources\zlib-$(ZLIB_TAG)\zlib.h

dependencies\archives\zlib$(ZLIB_ARCHIVE_TAG).zip:
	tools\wget -P dependencies\archives http://zlib.net/zlib$(ZLIB_ARCHIVE_TAG).zip

# Install gflags.
install_gflags: dependencies\install\lib\libgflags.lib dependencies\install\include\gflags\gflags.h

dependencies\install\lib\libgflags.lib: dependencies\sources\gflags\autogen.sh
ifeq ("$(VisualStudioVersion)", "11.0")
	tools\upgrade_to_vs2012.cmd dependencies\\solutions\\libgflags.vcxproj
endif
ifeq ("$(VisualStudioVersion)", "12.0")
	tools\upgrade_to_vs2013.cmd dependencies\\solutions\\libgflags.vcxproj
endif
	cd dependencies\solutions && msbuild libgflags.sln /target:Build
ifeq ("$(VisualStudioVersion)", "11.0")
	svn revert dependencies/solutions/libgflags.vcxproj
endif
ifeq ("$(VisualStudioVersion)", "12.0")
	svn revert dependencies/solutions/libgflags.vcxproj
endif


dependencies\install\include\gflags\gflags.h: dependencies\install\include\gflags dependencies\sources\gflags\src\windows\gflags\gflags.h
	copy dependencies\sources\gflags\src\windows\gflags\*.h dependencies\install\include\gflags
	tools\touch.exe dependencies\install\include\gflags\gflags.h

dependencies\install\include\gflags: dependencies\install\include
ifeq ($(wildcard dependencies\install\include\gflags),)
	tools\mkdir.exe dependencies\install\include\gflags
endif

dependencies\sources\gflags\src\windows\gflags\gflags.h: dependencies\sources\gflags\autogen.sh

dependencies\sources\gflags\autogen.sh:
	svn co http://gflags.googlecode.com/svn/trunk/ -r $(GFLAGS_TAG) dependencies/sources/gflags

# Install protocol buffers.
install_protobuf: dependencies\install\bin\protoc.exe  dependencies\install\include\google\protobuf\message.h

dependencies\install\bin\protoc.exe: dependencies\sources\protobuf\autogen.sh
ifeq ("$(VisualStudioVersion)", "11.0")
	tools\upgrade_to_vs2012.cmd dependencies\\solutions\\libprotobuf.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\solutions\\libprotobuf-lite.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\solutions\\libprotoc.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\solutions\\protoc.vcxproj
endif
ifeq ("$(VisualStudioVersion)", "12.0")
	tools\upgrade_to_vs2013.cmd dependencies\\solutions\\libprotobuf.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\solutions\\libprotobuf-lite.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\solutions\\libprotoc.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\solutions\\protoc.vcxproj
endif
	cd dependencies\solutions && msbuild protobuf.sln /t:Build /p:Configuration=Release;LinkIncremental=false
ifeq ("$(VisualStudioVersion)", "11.0")
	svn revert dependencies/solutions/libprotobuf.vcxproj
	svn revert dependencies/solutions/libprotobuf-lite.vcxproj
	svn revert dependencies/solutions/libprotoc.vcxproj
	svn revert dependencies/solutions/protoc.vcxproj
endif
ifeq ("$(VisualStudioVersion)", "12.0")
	svn revert dependencies/solutions/libprotobuf.vcxproj
	svn revert dependencies/solutions/libprotobuf-lite.vcxproj
	svn revert dependencies/solutions/libprotoc.vcxproj
	svn revert dependencies/solutions/protoc.vcxproj
endif


dependencies\install\include\google\protobuf\message.h: dependencies\sources\protobuf\vsprojects\include.tar
	cd dependencies\install && ..\..\tools\tar.exe xvmf ..\sources\protobuf\vsprojects\include.tar

dependencies\sources\protobuf\vsprojects\include.tar: dependencies\sources\protobuf\autogen.sh
	cd dependencies\sources\protobuf\vsprojects && extract_includes.bat
	cd dependencies\sources\protobuf\vsprojects && ..\..\..\..\tools\tar.exe cvf include.tar include

dependencies\sources\protobuf\autogen.sh:
	svn co http://protobuf.googlecode.com/svn/trunk/ -r $(PROTOBUF_TAG) dependencies/sources/protobuf

# Intall Google Apputils Python.
install_google_apputils: dependencies\sources\google-apputils\README

dependencies\sources\google-apputils\README:
	svn co http://google-apputils-python.googlecode.com/svn/trunk/ -r $(GOOGLE_APPUTILS_TAG) dependencies/sources/google-apputils

# Install sparsehash.
install_sparsehash: dependencies\install\include\google\dense_hash_map

dependencies\install\include\google\dense_hash_map: dependencies\sources\sparsehash\autogen.sh
	-md dependencies\install\include\sparsehash
	-md dependencies\install\include\sparsehash\internal
	-md dependencies\install\include\google
	-md dependencies\install\include\google\sparsehash
	-copy dependencies\sources\sparsehash\src\sparsehash\* dependencies\install\include\sparsehash
	-copy dependencies\sources\sparsehash\src\sparsehash\internal\* dependencies\install\include\sparsehash\internal
	-copy dependencies\sources\sparsehash\src\google\* dependencies\install\include\google
	-copy dependencies\sources\sparsehash\src\windows\google\* dependencies\install\include\google
	-copy dependencies\sources\sparsehash\src\windows\google\sparsehash\* dependencies\install\include\google\sparsehash
	-copy dependencies\sources\sparsehash\src\windows\sparsehash\internal\* dependencies\install\include\sparsehash\internal

dependencies\sources\sparsehash\autogen.sh:
	svn co http://sparsehash.googlecode.com/svn/trunk/ -r $(SPARSEHASH_TAG) dependencies/sources/sparsehash

# Install Coin CBC.
install_coin_cbc: dependencies\install\bin\cbc.exe

dependencies\install\bin\cbc.exe: dependencies\sources\coin-cbc\Cbc\MSVisualStudio\v10\$(CBC_PLATFORM)\cbc.exe
	copy dependencies\sources\coin-cbc\Cbc\MSVisualStudio\v10\$(CBC_PLATFORM)\*.lib dependencies\install\lib\coin
	copy dependencies\sources\coin-cbc\Cbc\src\*.hpp dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\Clp\src\*.hpp dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\Clp\src\OsiClp\*.hpp dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\CoinUtils\src\*.hpp dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\Cgl\src\*.hpp dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\Osi\src\Osi\*.hpp dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\Cbc\src\*.h dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\Clp\src\*.h dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\CoinUtils\src\*.h dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\Cgl\src\*.h dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\Osi\src\Osi\*.h dependencies\install\include\coin
	copy dependencies\sources\coin-cbc\Cbc\MSVisualStudio\v10\$(CBC_PLATFORM)\cbc.exe dependencies\install\bin

dependencies\sources\coin-cbc\Cbc\MSVisualStudio\v10\$(CBC_PLATFORM)\cbc.exe: dependencies\sources\coin-cbc\configure
ifeq ("$(VisualStudioVersion)", "11.0")
	tools\upgrade_to_vs2012.cmd dependencies\\sources\\coin-cbc\\Clp\\MSVisualStudio\\v10\\libOsiClp\\libOsiClp.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\sources\\coin-cbc\\Clp\\MSVisualStudio\\v10\\libClp\\libClp.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\sources\\coin-cbc\\Cbc\\MSVisualStudio\\v10\\libOsiCbc\\libOsiCbc.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\sources\\coin-cbc\\Cbc\\MSVisualStudio\\v10\\libCbc\\libCbc.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\sources\\coin-cbc\\Cbc\\MSVisualStudio\\v10\\cbc\\cbc.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\sources\\coin-cbc\\Cbc\\MSVisualStudio\\v10\\libCbcSolver\\libCbcSolver.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\sources\\coin-cbc\\Osi\\MSVisualStudio\\v10\\libOsi\\libOsi.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\sources\\coin-cbc\\CoinUtils\\MSVisualStudio\\v10\\libCoinUtils\\libCoinUtils.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\sources\\coin-cbc\\Cgl\\MSVisualStudio\\v10\\libCgl\\libCgl.vcxproj
endif
ifeq ("$(VisualStudioVersion)", "12.0")
	tools\upgrade_to_vs2013.cmd dependencies\\sources\\coin-cbc\\Clp\\MSVisualStudio\\v10\\libOsiClp\\libOsiClp.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\sources\\coin-cbc\\Clp\\MSVisualStudio\\v10\\libClp\\libClp.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\sources\\coin-cbc\\Cbc\\MSVisualStudio\\v10\\libOsiCbc\\libOsiCbc.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\sources\\coin-cbc\\Cbc\\MSVisualStudio\\v10\\libCbc\\libCbc.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\sources\\coin-cbc\\Cbc\\MSVisualStudio\\v10\\cbc\\cbc.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\sources\\coin-cbc\\Cbc\\MSVisualStudio\\v10\\libCbcSolver\\libCbcSolver.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\sources\\coin-cbc\\Osi\\MSVisualStudio\\v10\\libOsi\\libOsi.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\sources\\coin-cbc\\CoinUtils\\MSVisualStudio\\v10\\libCoinUtils\\libCoinUtils.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\sources\\coin-cbc\\Cgl\\MSVisualStudio\\v10\\libCgl\\libCgl.vcxproj
endif
	cd dependencies\sources\coin-cbc\Cbc\MSVisualStudio\v10 && msbuild Cbc.sln /t:cbc /p:Configuration=Release;BuildCmd=ReBuild

dependencies\sources\coin-cbc\configure:
	svn co https://projects.coin-or.org/svn/Cbc/releases/$(CBC_TAG) dependencies/sources/coin-cbc
	tools\sed -i -e "s/#  include <direct.h>/#  include <direct.h>\n#  include <cctype>/g" dependencies\sources\coin-cbc\CoinUtils\src\CoinHelperFunctions.hpp


# Install SWIG.
install_swig: dependencies\install\swigwin-$(SWIG_TAG)\swig.exe

dependencies\install\swigwin-$(SWIG_TAG)\swig.exe: dependencies\archives\swigwin-$(SWIG_TAG).zip
	tools\unzip -d dependencies/install dependencies\archives\swigwin-$(SWIG_TAG).zip
	tools\touch.exe dependencies\install\swigwin-$(SWIG_TAG)\swig.exe

dependencies\archives\swigwin-$(SWIG_TAG).zip:
	tools\wget -P dependencies\archives http://prdownloads.sourceforge.net/swig/swigwin-$(SWIG_TAG).zip

# Install glpk if needed.
install_glpk: $(GLPK_TARGET)

dependencies\install\bin\glpsol.exe: dependencies\sources\glpk-$(GLPK_TAG)\$(GLPK_PLATFORM)\glpsol.exe
	copy dependencies\sources\glpk-$(GLPK_TAG)\$(GLPK_PLATFORM)\glpk.lib dependencies\install\lib
	copy dependencies\sources\glpk-$(GLPK_TAG)\src\glpk.h dependencies\install\include
	copy dependencies\sources\glpk-$(GLPK_TAG)\$(GLPK_PLATFORM)\glpsol.exe dependencies\install\bin

 dependencies\sources\glpk-$(GLPK_TAG)\$(GLPK_PLATFORM)\glpsol.exe: dependencies\sources\glpk-$(GLPK_TAG)\configure
	copy dependencies\sources\glpk-$(GLPK_TAG)\$(GLPK_PLATFORM)\config_VC  dependencies\sources\glpk-$(GLPK_TAG)\$(GLPK_PLATFORM)\config.h
	cd dependencies\sources\glpk-$(GLPK_TAG)\$(GLPK_PLATFORM) && nmake -f makefile_VC

dependencies\sources\glpk-$(GLPK_TAG)\configure: dependencies\archives\glpk-$(GLPK_TAG).tar.gz
	cd dependencies\sources && ..\..\tools\gzip -dc ..\archives\glpk-$(GLPK_TAG).tar.gz | ..\..\tools\tar.exe xvmf -
	$(SED) -i -e 's/nologo/nologo \/MD/g' dependencies\sources\glpk-$(GLPK_TAG)\$(GLPK_PLATFORM)/Makefile_VC

# Install scip if needed.
install_scip: $(SCIP_TARGET)

dependencies/install/lib/scip.lib: dependencies/archives/scipoptsuite-$(SCIP_TAG).tgz
	cd dependencies\install && ..\..\tools\gzip -dc ..\archives\scipoptsuite-$(SCIP_TAG).tgz | ..\..\tools\tar.exe xvmf -
	cd dependencies\install\scipoptsuite-$(SCIP_TAG) && ..\..\..\tools\gzip -dc soplex-$(SOPLEX_TAG).tgz | ..\..\..\tools\tar.exe xvmf -
	cd dependencies\install\scipoptsuite-$(SCIP_TAG) && ..\..\..\tools\gzip -dc scip-$(SCIP_TAG).tgz | ..\..\..\tools\tar.exe xvmf -
ifeq ("$(VisualStudioVersion)", "11.0")
	tools\upgrade_to_vs2012.cmd dependencies\\solutions\\Scip\\soplex\\soplex.vcxproj
	tools\upgrade_to_vs2012.cmd dependencies\\solutions\\Scip\\scip\\scip.vcxproj
endif
ifeq ("$(VisualStudioVersion)", "12.0")
	tools\upgrade_to_vs2013.cmd dependencies\\solutions\\Scip\\soplex\\soplex.vcxproj
	tools\upgrade_to_vs2013.cmd dependencies\\solutions\\Scip\\scip\\scip.vcxproj
endif
	cd dependencies\solutions\Scip && msbuild /t:soplex
	cd dependencies\solutions\Scip && msbuild /t:scip
ifeq ("$(VisualStudioVersion)", "11.0")
	svn revert dependencies/solutions/Scip/soplex/soplex.vcxproj
	svn revert dependencies/solutions/Scip/scip/scip.vcxproj
endif
ifeq ("$(VisualStudioVersion)", "12.0")
	svn revert dependencies/solutions/Scip/soplex/soplex.vcxproj
	svn revert dependencies/solutions/Scip/scip/scip.vcxproj
endif

# Clean everything.
clean_third_party:
	-$(DEL) Makefile.local
	-$(DELREC) dependencies\install
	-$(DELREC) dependencies\sources\coin-cbc*
	-$(DELREC) dependencies\sources\gflags*
	-$(DELREC) dependencies\sources\glpk*
	-$(DELREC) dependencies\sources\google*
	-$(DELREC) dependencies\sources\protobuf*
	-$(DELREC) dependencies\sources\sparsehash*
	-$(DELREC) dependencies\sources\zlib*

# Create Makefile.local
makefile_third_party: Makefile.local

# Install python modules
install_python_modules:
	cd dependencies\sources\google-apputils && $(WINDOWS_PYTHON_PATH)\\python.exe setup.py install --user
	copy dependencies\install\bin\protoc.exe dependencies\sources\protobuf\src
	cd dependencies\sources\protobuf/python && $(WINDOWS_PYTHON_PATH)\\python.exe setup.py build
	cd dependencies\sources\protobuf/python && $(WINDOWS_PYTHON_PATH)\\python.exe setup.py install --user

Makefile.local:
	@echo Generating Makefile.local
	@echo WINDOWS_ZLIB_DIR = $(OR_ROOT_FULL)\\dependencies\\install> Makefile.local
	@echo WINDOWS_ZLIB_NAME=zlib.lib>> Makefile.local
	@echo WINDOWS_GFLAGS_DIR = $(OR_ROOT_FULL)\\dependencies\\install>> Makefile.local
	@echo WINDOWS_PROTOBUF_DIR = $(OR_ROOT_FULL)\\dependencies\\install>> Makefile.local
	@echo WINDOWS_SPARSEHASH_DIR = $(OR_ROOT_FULL)\\dependencies\\install>> Makefile.local
	@echo WINDOWS_SWIG_BINARY = $(OR_ROOT_FULL)\\dependencies\\install\\swigwin-$(SWIG_TAG)\\swig.exe>> Makefile.local
	@echo WINDOWS_CLP_DIR = $(OR_ROOT_FULL)\\dependencies\\install>> Makefile.local
	@echo WINDOWS_CBC_DIR = $(OR_ROOT_FULL)\\dependencies\\install>> Makefile.local
	@echo $(GLPK_MAKEFILE)>> Makefile.local
	@echo $(SCIP_MAKEFILE)>> Makefile.local
	@echo # Please define WINDOWS_SLM_DIR to use Sulum Optimization. >> Makefile.local
	@echo # Please define WINDOWS_GUROBI_DIR and GUROBI_LIB_VERSION to use Gurobi. >> Makefile.local
	@echo $(SELECTED_JDK_DEF)>> Makefile.local
	@echo WINDOWS_PYTHON_VERSION = \# Please define the python version (27 by default)>> Makefile.local
	@echo WINDOWS_PYTHON_PATH = \# Please define WINDOWS_PYTHON_PATH (c:\\python27 by default)>> Makefile.local
