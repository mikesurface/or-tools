Index: src/hash_test_interface.h
===================================================================
--- src/hash_test_interface.h	(revision 116)
+++ src/hash_test_interface.h	(working copy)
@@ -433,7 +433,7 @@
   bool supports_num_table_copies() const { return false; }
   bool supports_serialization() const { return true; }

-  void set_empty_key(const typename p::key_type& k) { }
+  void set_empty_key(const typename p::key_type&) { }
   void clear_empty_key() { }
   typename p::key_type empty_key() const { return typename p::key_type(); }

@@ -540,7 +540,7 @@
   bool supports_num_table_copies() const { return false; }
   bool supports_serialization() const { return true; }

-  void set_empty_key(const typename p::key_type& k) { }
+  void set_empty_key(const typename p::key_type&) { }
   void clear_empty_key() { }
   typename p::key_type empty_key() const { return typename p::key_type(); }

@@ -656,7 +656,7 @@
   bool supports_num_table_copies() const { return true; }
   bool supports_serialization() const { return true; }

-  void set_empty_key(const typename p::key_type& k) { }
+  void set_empty_key(const typename p::key_type&) { }
   void clear_empty_key() { }
   typename p::key_type empty_key() const { return typename p::key_type(); }

Index: src/sparsehash/sparsetable
===================================================================
--- src/sparsehash/sparsetable	(revision 116)
+++ src/sparsehash/sparsetable	(working copy)
@@ -1442,7 +1442,8 @@
   }

   typedef sparsegroup<value_type, GROUP_SIZE, allocator_type> group_type;
-  typedef std::vector<group_type, vector_alloc > group_vector_type;
+  typedef typename Alloc::template rebind<group_type>::other group_vector_type_allocator_type;
+  typedef std::vector<group_type, group_vector_type_allocator_type> group_vector_type;

   typedef typename group_vector_type::reference GroupsReference;
   typedef typename group_vector_type::const_reference GroupsConstReference;
